const key_enc = fetch(`http://127.0.0.1:5000/pr1v4t3`).then((res) => res.text()); let groupChatInterval; let sendMessageListener; let enterKeyListener;
const messagesContainers = document.getElementById('content-groups-content'); messagesContainers.addEventListener('click', function (event) { const clickedElement = event.target.closest('.message, .message-self'); if (clickedElement) { const messageContent = clickedElement.querySelector('#message'); const title = clickedElement.querySelector('.title'); if (title.style.height !== '15px') { messageContent.style.height = 'calc(100% - 15px)'; title.style.height = '15px'; title.style.opacity = '1'; title.style.width = 'unset'; } else { messageContent.style.height = '100%'; title.style.height = '0px'; title.style.opacity = '0'; title.style.width = '0px' } } });
const group_return = document.getElementById("ent-groups-ent-iso"); const group_iso = document.getElementById("message-group-iso"); group_return.addEventListener("click", () => { group_iso.style.opacity = 0; setTimeout(() => { group_iso.style.display = 'none'; general.style.opacity = 1; setTimeout(() => { general.style.display = 'block'; }, 700) }, 700) })
const btn_links = document.querySelectorAll("#full-toscoc"); btn_links.forEach(btn_link => { btn_link.addEventListener("click", () => { getData('/open_tos'); }); });
const messagesContainer = document.getElementById('content'); const tos = document.getElementById("tos"); const general = document.getElementById("general"); const calculator = document.getElementById("calculator"); const groups = document.getElementById("groups"); const groups_btn = document.getElementById("ent-groups"); const four_o_four = document.getElementById("network_err"); const enter_btn = document.getElementById("ent"); const input_main = document.getElementById("main-enter")
const btn_links2 = document.querySelectorAll("#full-info"); btn_links2.forEach(btn_link => { btn_link.addEventListener("click", () => { getData('/open_full'); }); });
let intervalId = setInterval(() => { getData("/alive").then(function (data) { if (data == "yes") { document.getElementsByTagName("body")[0].style.opacity = 1; clearInterval(intervalId); getData("/network").then(function (data) { if (data !== "RHS_BYOD" && data !== "RLM_GUEST" && data !== "Fyn's House") { four_o_four.style.display = 'flex'; four_o_four.style.opacity = 1; } else { tos.style.display = 'block'; tos.style.opacity = 1; } }) } }) }, 100);
let lastDisplayedTimestamp = null; let group_while_listen = ""; let lastDisplayedTimestamp_group = null;
function formatDate(inputDate) { const date = new Date(inputDate); const day = date.getDate(); const month = date.toLocaleString('default', { month: 'short' }).toUpperCase(); const year = date.getFullYear().toString().substr(-2); const hours = date.getHours(); const minutes = date.getMinutes(); const formattedDate = `${day}/${month}-${hours}:${minutes}`; return formattedDate; };
function getData(endpoint) { return fetch(`http://127.0.0.1:5000/${String(key_enc)}${endpoint}`).then((res) => res.text()).catch((error) => { console.error(error); }); };
function post_gen(data) { let isScrolledToBottom; try { const parsedData = JSON.parse(data); getData("/socket").then(function (ip_addr) { const sortedEntries = Object.entries(parsedData).map(([key, entry]) => ({ key, date: new Date(entry.date), timestamp: entry.date, message: entry.message || "", ip: entry.ip, })).sort((a, b) => a.date - b.date); const access = document.getElementById("content"); isScrolledToBottom = access.scrollHeight - access.clientHeight <= access.scrollTop + 1; sortedEntries.forEach(entry => { if (!lastDisplayedTimestamp || entry.date > lastDisplayedTimestamp) { const messageDiv = document.createElement('div'); const messageClass = entry.ip === ip_addr ? 'message-self' : 'message'; messageDiv.classList.add(messageClass); entry.message = entry.message.replace(/P405&Q/g, '?').replace(/P405&S1/g, '/').replace(/P405&S2/g, '\\') || ""; messageDiv.innerHTML = `<div id="message">${entry.message}</div> <div class="title"><div class="user">${entry.timestamp}</div></div>`; access.appendChild(messageDiv); lastDisplayedTimestamp = entry.date; } }); if (isScrolledToBottom) { access.scrollTo({ left: 0, top: access.scrollHeight, behavior: "smooth" }); } }) } catch (error) { console.error("An error occurred:", error); } }
function openGroupChat(groupName, groupPassword) { const access = document.getElementsByClassName("message-script-groups")[0]; access.innerHTML = ''; post_gen_group("", true); if (groupChatInterval) { clearInterval(groupChatInterval); } if (sendMessageListener) { document.getElementsByClassName("button-ent-groups-iso")[0].removeEventListener("click", sendMessageListener); } if (enterKeyListener) { window.removeEventListener('keyup', enterKeyListener); }; function sendMessage() { const input_main_groups = document.getElementById("main-enter-groups-iso"); const input_enter = input_main_groups.value.replace("?", "P405&Q"); console.log('Input Value:', input_main_groups.value); getData(`/send_group/${input_enter}/${groupName}/${groupPassword}`); input_main_groups.value = ''; } sendMessageListener = sendMessage; document.getElementsByClassName("button-ent-groups-iso")[0].addEventListener("click", sendMessage); enterKeyListener = function (event) { if (event.keyCode === 13) { sendMessage(); } }; window.addEventListener('keyup', enterKeyListener); getData(`/check_pass_group/${groupName}/${groupPassword}`).then(function (state) { if (state == 'true') { document.getElementsByName("group-input-change")[0].placeholder = `Message ${groupName}`; groups.style.opacity = 0; const group_iso = document.getElementById("message-group-iso"); setTimeout(() => { groups.style.display = 'none'; group_iso.style.display = 'block'; groupChatInterval = setInterval(() => { getData(`/message_get/${groupName}`).then(function (messagedata) { post_gen_group(messagedata, false); }); }, 1000); setTimeout(() => { group_iso.style.opacity = 1; }, 100); }, 700) } }); };
window.addEventListener('keyup', function (event) { if (event.keyCode === 13 && general.style.display === 'block') { if (input_main.value == "/key P301&C") { getData("/clear"); input_main.value = ''; } else { let input_enter = input_main.value.replace(/\?/g, "P405&Q"); input_enter = input_enter.replace(/\//g, "P405&S1"); input_enter = input_enter.replace(/\\/g, "P405&S2"); getData(`/send/${input_enter}`); input_main.value = ''; } } });
enter_btn.addEventListener("click", () => { if (general.style.display == 'block') { if (input_main.value == "/key P301&C") { getData("/clear"); input_main.value = ''; } else { const input_enter = input_main.value.replace("?", "P405&Q"); getData(`/send/${input_enter}`); input_main.value = ''; } } });
groups_btn.addEventListener("click", () => { general.style.opacity = 0; setTimeout(() => { general.style.display = 'none'; groups.style.display = 'block'; setTimeout(() => { groups.style.opacity = 1; }, 100) }, 700) })
document.getElementById("enter").addEventListener("click", () => { tos.style.opacity = 0; setTimeout(() => { tos.style.display = 'none'; setTimeout(() => { general.style.display = 'block'; const access = document.getElementById("content"); access.scrollTo({ left: 0, top: access.scrollHeight, behavior: "smooth" }); setTimeout(() => { general.style.opacity = 1; }, 300) }, 300) }, 300) })
messagesContainer.addEventListener('click', function (event) { const clickedElement = event.target.closest('.message, .message-self'); if (clickedElement) { const messageContent = clickedElement.querySelector('#message'); const title = clickedElement.querySelector('.title'); if (title.style.height !== '15px') { messageContent.style.height = 'calc(100% - 15px)'; title.style.height = '15px'; title.style.opacity = '1'; title.style.width = 'unset'; } else { messageContent.style.height = '100%'; title.style.height = '0px'; title.style.opacity = '0'; title.style.width = '0px' } } }); function appendToContentGroups(dataObject) { const element = document.getElementById("content-groups"); element.innerHTML = ""; if (typeof dataObject === "string") { try { dataObject = JSON.parse(dataObject); } catch (error) { console.error("Error parsing JSON:", error); return; } } for (const key in dataObject) { if (dataObject.hasOwnProperty(key)) { const name = dataObject[key].name; const password = dataObject[key].password; const newItem = document.createElement("div"); newItem.id = "item-groups"; newItem.innerHTML = `<div class="item-groups-title">${name}</div><input placeholder="password" id="groups-item-input-password">`; element.appendChild(newItem); } } }
document.addEventListener('click', function (event) { const target = event.target; if (target.tagName === 'INPUT') { target.addEventListener('keyup', function (event) { if (event.keyCode === 13) { const nameElement = target.previousElementSibling; if (nameElement && nameElement.classList.contains('item-groups-title')) { const name = nameElement.textContent.trim(); const inputValue = target.value; openGroupChat(name, inputValue) } } }); } });
getData("/groups_list").then(function (data) { appendToContentGroups(data) });
setInterval(() => { getData("/general").then(function (data) { post_gen(data) }) }, 1000);
setInterval(() => { getData("/groups_list").then(function (data) { appendToContentGroups(data) }) }, 10000); function post_gen_group(data, resetMemory = false) { let isScrolledToBottom; if (resetMemory) { lastDisplayedTimestamp_group = null; } try { const parsedData = JSON.parse(data); datagetData("/socket").then(function (ip_addr) { const sortedEntries = Object.entries(parsedData).map(([key, entry]) => ({ key, date: new Date(entry.date), timestamp: formatDate(entry.date), message: entry.message || "", ip: entry.ip, username: entry.user, })).sort((a, b) => a.date - b.date); const access = document.getElementsByClassName("message-script-groups")[0]; isScrolledToBottom = access.scrollHeight - access.clientHeight <= access.scrollTop + 1; sortedEntries.forEach(entry => { if (!lastDisplayedTimestamp_group || entry.date > lastDisplayedTimestamp_group) { const messageDiv = document.createElement('div'); const messageClass = entry.ip === ip_addr ? 'message-self' : 'message'; messageDiv.classList.add(messageClass); entry.message = entry.message.replace(/P405&Q/g, '?').replace(/P405&S1/g, '/').replace(/P405&S2/g, '\\') || ""; messageDiv.innerHTML = `<div id="message">${entry.message}</div> <div class="title"><div class="user">${entry.timestamp},  ${entry.username}</div></div>`; access.appendChild(messageDiv); lastDisplayedTimestamp_group = entry.date; } }); if (isScrolledToBottom) { access.scrollTo({ left: 0, top: access.scrollHeight, behavior: "smooth" }); } }) } catch (error) { console.error("An error occurred:", error); } }